{"version":3,"sources":["pages/home/index.tsx","pages/code/index.tsx","pages/blog/index.tsx","pages/resume/index.tsx","Nav.tsx","Layout.tsx","serviceWorker.js","index.js","App.tsx"],"names":["HomePage","_ref","path","Object","core_browser_esm","css","_templateObject","code","react_default","a","createElement","blog","resume","Row","children","indent","Nav_templateObject","NavLink","_ref2","props","objectWithoutProperties","es","assign","_templateObject2","getProps","_ref3","isCurrent","style","backgroundColor","borderLeft","concat","Nav_Row","Nav","_templateObject3","_templateObject4","index_esm","_templateObject5","Nav_NavLink","to","mql","window","matchMedia","SidebarWithPath","Sidebar","Layout","_useState","useState","_useState2","slicedToArray","sidebarOpen","setSidebarOpen","_useState3","matches","_useState4","sidebarDocked","setSidebarDocked","useEffect","handleMediaQueryChange","addListener","removeListener","sidebar","open","docked","onSetOpen","defaultSidebarWidth","Boolean","location","hostname","match","ReactDOM","render","App_templateObject","src_Layout","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.024afe65.chunk.js","sourcesContent":["/** @jsx jsx */\nimport { css, jsx } from '@emotion/core';\n\nexport default function HomePage({ path }: { path: string }) {\n  return <div css={css``}>main</div>;\n}\n","import React from 'react';\n\nexport default ({ path }: { path: string }) => <div>Coming soon</div>;\n","import React from 'react';\n\nexport default ({ path }: { path: string }) => <div>Coming soon</div>;\n","import React from 'react';\n\nexport default ({ path }: { path: string }) => <div>Coming soon</div>;\n","/** @jsx jsx */\nimport { css, jsx } from '@emotion/core';\nimport { FaCaretDown, FaFolderOpen, FaRegFileCode } from 'react-icons/fa';\nimport { Link } from '@reach/router';\n\nconst Row: React.FunctionComponent<{ indent: number }> = ({\n  children,\n  indent\n}) => (\n  <div\n    css={css`\n      padding: 0.5rem 0 0.5rem ${indent}rem;\n    `}\n  >\n    {children}\n  </div>\n);\n\nconst borderSize = '3px';\nconst navBorderAccent = '#f58b00';\nconst navSelectedBackgroundColor = '#83e2fc33';\nconst navHoverBackgroundColor = '#37414050';\n\nconst NavLink: React.FunctionComponent<{ to: string; indent: number }> = ({\n  children,\n  indent,\n  ...props\n}) => (\n  <Link\n    {...props}\n    css={css`\n      border-left: ${borderSize} solid transparent;\n      display: block;\n      color: #eee;\n      text-decoration: none;\n\n      &:hover {\n        background-color: ${navHoverBackgroundColor};\n        border-left: ${borderSize} solid ${navBorderAccent};\n      }\n    `}\n    getProps={({ isCurrent }) => {\n      // the object returned here is passed to the\n      // anchor element's props\n      return {\n        style: {\n          backgroundColor: isCurrent ? navSelectedBackgroundColor : null,\n          borderLeft: isCurrent ? `3px solid ${navBorderAccent}` : null\n        }\n      };\n    }}\n  >\n    <Row indent={indent}>{children}</Row>\n  </Link>\n);\n\nexport default () => (\n  <nav\n    css={css`\n      background-color: #060606;\n      height: 100%;\n      font-size: 1.5rem;\n      width: 250px;\n    `}\n  >\n    <header\n      css={css`\n        margin-bottom: 1rem;\n        padding: 1rem;\n      `}\n    >\n      EXPLORER\n    </header>\n    <div>\n      <Row indent={1}>\n        <FaCaretDown /> Files\n      </Row>\n      <Row indent={1.25}>\n        <FaFolderOpen\n          css={css`\n            vertical-align: top;\n          `}\n        />{' '}\n        src\n      </Row>\n      <NavLink indent={3} to=\"/\">\n        <FaRegFileCode /> Home.js\n      </NavLink>\n      <NavLink indent={3} to=\"/code\">\n        <FaRegFileCode /> Code.js\n      </NavLink>\n      <NavLink indent={3} to=\"/blog\">\n        <FaRegFileCode /> Blog.js\n      </NavLink>\n      <NavLink indent={3} to=\"/resume\">\n        <FaRegFileCode /> Resume.js\n      </NavLink>\n    </div>\n  </nav>\n);\n","import React, { useEffect, useState } from 'react';\nimport { Router } from '@reach/router';\nimport Sidebar, { SidebarProps } from 'react-sidebar';\nimport Nav from './Nav';\n\nconst mql = window.matchMedia(`(min-width: 800px)`);\n\nconst SidebarWithPath = Sidebar as React.ClassicComponentClass<\n  SidebarProps & { path: string }\n>;\n\nconst Layout: React.FunctionComponent = ({ children }) => {\n  const [sidebarOpen, setSidebarOpen] = useState(false);\n  const [sidebarDocked, setSidebarDocked] = useState(mql.matches);\n\n  useEffect(() => {\n    function handleMediaQueryChange() {\n      setSidebarOpen(false);\n      setSidebarDocked(mql.matches);\n    }\n\n    mql.addListener(handleMediaQueryChange);\n    return () => mql.removeListener(handleMediaQueryChange);\n  }, []);\n\n  return (\n    <Router>\n      <SidebarWithPath\n        path=\"/\"\n        sidebar={<Nav />}\n        open={sidebarOpen}\n        docked={sidebarDocked}\n        onSetOpen={setSidebarOpen}\n        defaultSidebarWidth={250}\n      >\n        {children}\n      </SidebarWithPath>\n    </Router>\n  );\n};\n\nexport default Layout;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","/** @jsx jsx */\nimport { css, jsx } from '@emotion/core';\nimport Home from './pages/home';\nimport Code from './pages/code';\nimport Blog from './pages/blog';\nimport Resume from './pages/resume';\nimport Layout from './Layout';\n\nexport default function App() {\n  return (\n    <div\n      css={css`\n        background-color: #111;\n        color: #eee;\n        font-size: 16px;\n        font-family: 'Roboto', sans-serif;\n        height: 100vh;\n        overflow: hidden;\n        width: 100vw;\n      `}\n    >\n      <Layout>\n        <Home path=\"/\" />\n        <Code path=\"/code\" />\n        <Blog path=\"/blog\" />\n        <Resume path=\"/resume\" />\n      </Layout>\n    </div>\n  );\n}\n"],"sourceRoot":""}